"""
models.py is generated by flask-sqlacodegen
pip3 install flask-sqlacodegen
flask-sqlacodegen --flask --outfile models.py mysql+pymysql://user-name:password@host:port/db-schema

Example:
flask-sqlacodegen --flask --outfile models.py mysql+pymysql://twist:twist@127.0.0.1:3307/nbassistant

reference: https://www.devmashup.com/generating-flask-sqlalchemy-models-with-flask-sqlacodegen/
"""
from flask import Blueprint
from business.config import Config
from business.models import Player
from business.models import TeamPlayer
from business.models import Team
from business.models import AwardsPrediction
from business.models import EasternConferencePlayoffsTeam
from business.models import WesternConferencePlayoffsTeam
from business.models import EveryGamePredictedResult
import json
import logging


predictions = Blueprint('predictions', __name__)
configuration = Config()
configuration.log_init()
logger = logging.getLogger()


@predictions.route("/api/predictions")
def getPredictions():
    """
    :return:
    res = {
        "meta": {
            "code": 200
        },
        "data": {
            "champion": {
                "east_champion": {
                    "team_id": "1301",
                    "team_name": "Houston Rockets",
                    "logo": "https://d2p3bygnnzw9w3.cloudfront.net/req/201811271/tlogo/bbr/HOU.png"
                    "big_logo": "https://d2p3bygnnzw9w3.cloudfront.net/req/201811271/tlogo/bbr/HOU.png"
                },
                "west_champion": {
                    "team_id": "1301",
                    "team_name": "Houston Rockets",
                    "logo": "https://d2p3bygnnzw9w3.cloudfront.net/req/201811271/tlogo/bbr/HOU.png"
                    "big_logo": "https://d2p3bygnnzw9w3.cloudfront.net/req/201811271/tlogo/bbr/HOU.png"
                },
                "final_champion": {
                    "team_id": "1301",
                    "team_name": "Houston Rockets",
                    "logo": "https://d2p3bygnnzw9w3.cloudfront.net/req/201811271/tlogo/bbr/HOU.png"
                    "big_logo": "https://d2p3bygnnzw9w3.cloudfront.net/req/201811271/tlogo/bbr/HOU.png"
                }
            },
            "teams_to_play_off": {
                "east_candidates": [
                    "1302", "1311", "5320", "1278", "1302", "1311", "5320", "1278"
                ],
                "west_candidates": [
                    "1302", "1311", "5320", "1278", "1302", "1311", "5320", "1278"
                ]
            },
            "MVP": {
                "player_id": "13",
                "player_name": "James Harden",
                "picture": "https://d2cwpp38twqe55.cloudfront.net/req/201811081/images/players/abrinal01.jpg"
            }
        }
    }
    return json.dumps(res)
    """
    award_temp = AwardsPrediction.query.limit(1).all()
    east_champion_name = award_temp[0].eastern_champion
    east_champion_temp = Team.query.filter_by(name=east_champion_name).first()
    west_champion_name = award_temp[0].western_champion
    west_champion_temp = Team.query.filter_by(name=west_champion_name).first()
    final_champion_name = award_temp[0].final_champion
    final_champion_temp = Team.query.filter_by(name=final_champion_name).first()
    eastern_candidates_temp = EasternConferencePlayoffsTeam.query.order_by(EasternConferencePlayoffsTeam.Team_Ranking)
    western_candidates_temp = WesternConferencePlayoffsTeam.query.order_by(WesternConferencePlayoffsTeam.Team_Ranking)
    eastern_candidates_id = []
    western_candidates_id = []
    for eastern_candidate in eastern_candidates_temp:
        team_temp = Team.query.filter_by(name=eastern_candidate.Team_Name).first()
        eastern_candidates_id.append(str(team_temp.id))
    for western_candidate in western_candidates_temp:
        team_temp = Team.query.filter_by(name=western_candidate.Team_Name).first()
        western_candidates_id.append(str(team_temp.id))
    MVP_name = award_temp[0].MVP
    MVP_temp = Player.query.filter_by(name=MVP_name).first()
    res = {
        "meta": {
            "code": 200
        },
        "data": {
            "champion": {
                "east_champion": {
                    "team_id": str(east_champion_temp.id),
                    "team_name": east_champion_name,
                    "logo": east_champion_temp.logo,
                    "big_logo": east_champion_temp.big_logo
                },
                "west_champion": {
                    "team_id": str(west_champion_temp.id),
                    "team_name": west_champion_name,
                    "logo": west_champion_temp.logo,
                    "big_logo": west_champion_temp.big_logo
                },
                "final_champion": {
                    "team_id": str(final_champion_temp.id),
                    "team_name": final_champion_name,
                    "logo": final_champion_temp.logo,
                    "big_logo": final_champion_temp.big_logo
                }
            },
            "teams_to_play_off": {
                 "east_candidates": eastern_candidates_id,
                 "west_candidates": western_candidates_id
             },
             "MVP": {
                "player_id": str(MVP_temp.id),
                "player_name": MVP_name,
                "picture": MVP_temp.photo
            }
        }
    }
    return json.dumps(res)

@predictions.route("/api/prediction/<string:team_id>")
def team_prediction(team_id):
    """
    The prediction of a team at home
    :param team_id:
    :return:
     res = {
        "meta": {
            "code": 200
        },
        "data": [
            {
                "team_id": team_id,
                "team_name": "Houston Rockets",
                "logo": "https://d2p3bygnnzw9w3.cloudfront.net/req/201811271/tlogo/bbr/HOU.png",
                "big_logo": "https://d2p3bygnnzw9w3.cloudfront.net/req/201811271/tlogo/bbr/HOU.png",
                "scoreA": 32.12,
                "scoreB": 23.24
            },
            {},
            {}
        ]
    }
    return json.dumps(res)
    """
    team_temp = Team.query.filter_by(id=team_id).first()
    team_name = team_temp.name
    predicted_list = []
    game_predicted_results = EveryGamePredictedResult.query.filter_by(Visitor_Team=team_name)
    for game_predicted_result in game_predicted_results:
        home_team_name = game_predicted_result.Home_Team
        scoreA = float(game_predicted_result.Predicted_Visitor_Score)
        scoreB = float(game_predicted_result.Predicted_Home_Score)
        home_team_temp = Team.query.filter_by(name=home_team_name).first()
        predicted_json = {
            "team_id": str(home_team_temp.id),
            "team_name": home_team_name,
            "logo": home_team_temp.logo,
            "big_logo": home_team_temp.big_logo,
            "scoreA": scoreA,
            "scoreB": scoreB
        }
        predicted_list.append(predicted_json)
    res = {
        "meta": {
            "code": 200
        },
        "data": predicted_list
    }
    return json.dumps(res)